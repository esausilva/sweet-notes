type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  specialSomeonesForUser(order: [SpecialSomeoneSortInput!]): [SpecialSomeone!]!
  notes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: NoteFilterInput
    order: [NoteSortInput!]
  ): NotesConnection
}

type Mutation {
  createSpecialSomeone(
    input: CreateSpecialSomeoneCommandInput!
  ): CreateSpecialSomeonePayload!
  createNote(input: CreateNoteCommandInput!): CreateNotePayload!
}

type SpecialSomeone implements Node {
  user: User!
  notes: [Note!]!
  id: ID!
  uniqueIdentifier: String!
  firstName: String!
  lastName: String!
  nickname: String
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  emailAddress: String!
  notes: [Note!]!
  specialSomeones: [SpecialSomeone!]!
}

type Note implements Node {
  specialSomeone: SpecialSomeone!
  user: User!
  id: ID!
  message: String!
  createdUTC: DateTime!
}

input CreateNoteCommandInput {
  message: String!
  specialSomeoneId: ID!
}

input CreateSpecialSomeoneCommandInput {
  firstName: String!
  lastName: String!
  nickName: String
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

input SpecialSomeoneFilterInput {
  and: [SpecialSomeoneFilterInput!]
  or: [SpecialSomeoneFilterInput!]
  uniqueIdentifier: StringOperationFilterInput
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

input SpecialSomeoneSortInput {
  firstName: SortEnumType
  lastName: SortEnumType
}

input NoteFilterInput {
  and: [NoteFilterInput!]
  or: [NoteFilterInput!]
  message: StringOperationFilterInput
  createdUTC: DateTimeOperationFilterInput
  specialSomeone: SpecialSomeoneFilterInput
}

input NoteSortInput {
  createdUTC: SortEnumType
}

"""
A connection to a list of items.
"""
type NotesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [NotesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Note!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

enum SortEnumType {
  ASC
  DESC
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type NotesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note!
}

type CreateNotePayload {
  note: Note!
  errors: [UserError!]
}

type CreateSpecialSomeonePayload {
  specialSomeone: SpecialSomeone!
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}
